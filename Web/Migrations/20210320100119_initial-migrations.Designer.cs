// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web.Data;

namespace Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210320100119_initial-migrations")]
    partial class initialmigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BodyNumber")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<int>("CarBodyId")
                        .HasColumnType("integer");

                    b.Property<string>("Characteristics")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Equipment1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Equipment2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Equipment3Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CarBodyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Equipment1Id");

                    b.HasIndex("Equipment2Id");

                    b.HasIndex("Equipment3Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyNumber = "5TFJX4GNXDX018902",
                            Brand = "Chevrolet",
                            CarBodyId = 1,
                            Color = "Color [Aqua]",
                            EmployeeId = 1,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2019, 3, 20, 12, 1, 18, 446, DateTimeKind.Local).AddTicks(5288),
                            ManufacturerId = 1,
                            Price = 20000.0
                        },
                        new
                        {
                            Id = 2,
                            BodyNumber = "JTHBE262962076696",
                            Brand = "Toyota",
                            CarBodyId = 2,
                            Color = "Color [Firebrick]",
                            EmployeeId = 2,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2020, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3479),
                            ManufacturerId = 2,
                            Price = 20500.0
                        },
                        new
                        {
                            Id = 3,
                            BodyNumber = "JTEZT14R168050778",
                            Brand = "Peugeot",
                            CarBodyId = 4,
                            Color = "Color [Gainsboro]",
                            EmployeeId = 4,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2018, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3605),
                            ManufacturerId = 5,
                            Price = 50000.0
                        },
                        new
                        {
                            Id = 4,
                            BodyNumber = "3LNHL2GC6CR898612",
                            Brand = "Volkswagen",
                            CarBodyId = 3,
                            Color = "Color [Yellow]",
                            EmployeeId = 5,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2017, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3647),
                            ManufacturerId = 3,
                            Price = 26000.0
                        },
                        new
                        {
                            Id = 5,
                            BodyNumber = "KNAGE123175119229",
                            Brand = "Toyota",
                            CarBodyId = 5,
                            Color = "Color [Azure]",
                            EmployeeId = 6,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2019, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3683),
                            ManufacturerId = 2,
                            Price = 20700.0
                        },
                        new
                        {
                            Id = 6,
                            BodyNumber = "1G1ZS518X6F146715",
                            Brand = "Peugeot",
                            CarBodyId = 4,
                            Color = "Color [YellowGreen]",
                            EmployeeId = 2,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2021, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3718),
                            ManufacturerId = 5,
                            Price = 30000.0
                        },
                        new
                        {
                            Id = 7,
                            BodyNumber = "1ZVHT80N365193130",
                            Brand = "Toyota",
                            CarBodyId = 2,
                            Color = "Color [Linen]",
                            EmployeeId = 7,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2020, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3753),
                            ManufacturerId = 2,
                            Price = 25000.0
                        },
                        new
                        {
                            Id = 8,
                            BodyNumber = "2A8HR54PX8R129788",
                            Brand = "BMW",
                            CarBodyId = 4,
                            Color = "Color [Teal]",
                            EmployeeId = 8,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2019, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3788),
                            ManufacturerId = 4,
                            Price = 23000.0
                        },
                        new
                        {
                            Id = 9,
                            BodyNumber = "WMWZC3C50DWP16002",
                            Brand = "Cadillac",
                            CarBodyId = 1,
                            Color = "Color [Cornsilk]",
                            EmployeeId = 2,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2020, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3824),
                            ManufacturerId = 1,
                            Price = 80000.0
                        },
                        new
                        {
                            Id = 10,
                            BodyNumber = "1G11H5SA3DU187967",
                            Brand = "Volkswagen",
                            CarBodyId = 5,
                            Color = "Color [PowderBlue]",
                            EmployeeId = 9,
                            Equipment1Id = 1,
                            Equipment2Id = 2,
                            Equipment3Id = 3,
                            ManufactureDate = new DateTime(2019, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(3857),
                            ManufacturerId = 3,
                            Price = 99000.0
                        });
                });

            modelBuilder.Entity("Web.Models.CarBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarBodies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Limousine"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Minivan"
                        });
                });

            modelBuilder.Entity("Web.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("CarId")
                        .HasColumnType("integer");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPayment")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Passport")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<double>("PrepaymentPercentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("883e07ef-63af-4378-883c-fa9b4d51c9b3"),
                            Address = "2981  Tipple Road",
                            CarId = 2,
                            EmployeeId = 5,
                            IsDone = false,
                            IsPayment = true,
                            Name = "Jacob A Frazier",
                            OrderDate = new DateTime(2019, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(6741),
                            Passport = "204-64-7000",
                            Phone = "215-756-7457",
                            PrepaymentPercentage = 10.0,
                            SaleDate = new DateTime(2018, 3, 20, 12, 1, 18, 450, DateTimeKind.Local).AddTicks(7622)
                        },
                        new
                        {
                            Id = new Guid("e31d77d3-7905-4b47-a904-36edb687488d"),
                            Address = "3226  Goodwin Avenue",
                            CarId = 5,
                            EmployeeId = 6,
                            IsDone = false,
                            IsPayment = false,
                            Name = "Rebecca M McIntosh",
                            OrderDate = new DateTime(2017, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(1921),
                            Passport = "532-38-6188",
                            Phone = "509-305-4300",
                            PrepaymentPercentage = 12.0,
                            SaleDate = new DateTime(2019, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(1962)
                        },
                        new
                        {
                            Id = new Guid("96b04ac7-1e32-419f-bb95-3621904a0e45"),
                            Address = "3601  Dovetail Estates",
                            CarId = 6,
                            EmployeeId = 7,
                            IsDone = true,
                            IsPayment = true,
                            Name = "George E Lindquist",
                            OrderDate = new DateTime(2019, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(1993),
                            Passport = "287-90-1608",
                            Phone = "580-977-7609",
                            PrepaymentPercentage = 14.0,
                            SaleDate = new DateTime(2018, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2017)
                        },
                        new
                        {
                            Id = new Guid("5797f76d-3f68-4701-974f-9437f487e42a"),
                            Address = "2670  Hillhaven Drive",
                            CarId = 8,
                            EmployeeId = 8,
                            IsDone = false,
                            IsPayment = false,
                            Name = "Joanne A Freeman",
                            OrderDate = new DateTime(2018, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2046),
                            Passport = "568-41-0182",
                            Phone = "201-584-5301",
                            PrepaymentPercentage = 56.0,
                            SaleDate = new DateTime(2017, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2071)
                        },
                        new
                        {
                            Id = new Guid("10b84f9a-7148-4336-aff5-f771d92f6f87"),
                            Address = "2994  Briarwood Road",
                            CarId = 5,
                            EmployeeId = 2,
                            IsDone = false,
                            IsPayment = true,
                            Name = "Tracy C Robinson",
                            OrderDate = new DateTime(2019, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2098),
                            Passport = "292-26-7557",
                            Phone = "508-926-8765",
                            PrepaymentPercentage = 99.0,
                            SaleDate = new DateTime(2020, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2123)
                        },
                        new
                        {
                            Id = new Guid("0f30579b-5d4f-4c0a-9170-e71052892476"),
                            Address = "1887  Sigley Road",
                            CarId = 4,
                            EmployeeId = 5,
                            IsDone = false,
                            IsPayment = false,
                            Name = "Tammy E Wolf",
                            OrderDate = new DateTime(2021, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2149),
                            Passport = "366-21-9992",
                            Phone = "818-840-4421",
                            PrepaymentPercentage = 1.0,
                            SaleDate = new DateTime(2021, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2175)
                        },
                        new
                        {
                            Id = new Guid("e609fd65-076d-4a23-a2c2-52cc684c74e6"),
                            Address = "535  Boundary Street",
                            CarId = 7,
                            EmployeeId = 4,
                            IsDone = true,
                            IsPayment = true,
                            Name = "Norman L Hernandez",
                            OrderDate = new DateTime(2017, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2217),
                            Passport = "366-21-9992",
                            Phone = "405-733-5090",
                            PrepaymentPercentage = 22.0,
                            SaleDate = new DateTime(2017, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2241)
                        },
                        new
                        {
                            Id = new Guid("23334ee4-7f5e-4820-b2af-1a471233af0e"),
                            Address = "585  Leisure Lane",
                            CarId = 8,
                            EmployeeId = 2,
                            IsDone = false,
                            IsPayment = false,
                            Name = "Scott J Harris",
                            OrderDate = new DateTime(2021, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2269),
                            Passport = "450-39-0363",
                            Phone = "301-236-7537",
                            PrepaymentPercentage = 54.0,
                            SaleDate = new DateTime(2021, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2294)
                        },
                        new
                        {
                            Id = new Guid("0bb63653-d408-4f83-b08f-7b84a685a269"),
                            Address = "4480  Roosevelt Street",
                            CarId = 1,
                            EmployeeId = 1,
                            IsDone = true,
                            IsPayment = true,
                            Name = "Jeremy M Sanson",
                            OrderDate = new DateTime(2021, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2321),
                            Passport = "551-81-0381",
                            Phone = "805-907-2039",
                            PrepaymentPercentage = 76.0,
                            SaleDate = new DateTime(2017, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2345)
                        },
                        new
                        {
                            Id = new Guid("1888b96e-e929-4f8f-868f-627533178100"),
                            Address = "3504  Henery Street",
                            CarId = 9,
                            EmployeeId = 9,
                            IsDone = false,
                            IsPayment = false,
                            Name = "Angela C Moreno",
                            OrderDate = new DateTime(2020, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2372),
                            Passport = "287-22-1837",
                            Phone = "614-499-4827",
                            PrepaymentPercentage = 100.0,
                            SaleDate = new DateTime(2020, 3, 20, 12, 1, 18, 451, DateTimeKind.Local).AddTicks(2397)
                        });
                });

            modelBuilder.Entity("Web.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Passport")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 18,
                            FullName = "George F Marks",
                            Gender = 1,
                            PositionId = 2
                        },
                        new
                        {
                            Id = 2,
                            Age = 19,
                            FullName = "Robert J Shaw",
                            Gender = 1,
                            PositionId = 3
                        },
                        new
                        {
                            Id = 3,
                            Age = 20,
                            FullName = "Sergio C Hunter",
                            Gender = 1,
                            PositionId = 2
                        },
                        new
                        {
                            Id = 4,
                            Age = 21,
                            FullName = "Betty L Johnson",
                            Gender = 2,
                            PositionId = 4
                        },
                        new
                        {
                            Id = 5,
                            Age = 22,
                            FullName = "Tara T Fenn",
                            Gender = 2,
                            PositionId = 1
                        },
                        new
                        {
                            Id = 6,
                            Age = 23,
                            FullName = "Freda G Brooks",
                            Gender = 0,
                            PositionId = 1
                        },
                        new
                        {
                            Id = 7,
                            Age = 24,
                            FullName = "Brian R Atkinson",
                            Gender = 0,
                            PositionId = 1
                        },
                        new
                        {
                            Id = 8,
                            Age = 25,
                            FullName = "Kenneth J Goudreau",
                            Gender = 1,
                            PositionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Age = 26,
                            FullName = "Kristina K Denis",
                            Gender = 2,
                            PositionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Age = 27,
                            FullName = "June D Hudson",
                            Gender = 2,
                            PositionId = 5
                        });
                });

            modelBuilder.Entity("Web.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Characteristics")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First Aid Kit",
                            Price = 100.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tactical Flashlight",
                            Price = 200.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Multi-Tool",
                            Price = 50.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Car Hammer",
                            Price = 150.0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ice-scraper",
                            Price = 99.0
                        });
                });

            modelBuilder.Entity("Web.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "185  West Side Avenue",
                            Country = "USA",
                            Description = "General Motors (GM), one of the world's largest auto manufacturers, makes and sells cars and trucks worldwide under well-known brands such as Buick, Cadillac, Chevrolet, and GMC.",
                            EmployeeId = 1,
                            Name = "General Motors"
                        },
                        new
                        {
                            Id = 2,
                            Address = "1607  Owen Lane",
                            Country = "Japan",
                            Description = "TOYOTA MOTOR CORPORATION is a Japan-based company engaged in the automobile business, finance business and other businesses. ",
                            EmployeeId = 5,
                            Name = "Toyota Motor Corp."
                        },
                        new
                        {
                            Id = 3,
                            Address = "3853  Zappia Drive",
                            Country = "German",
                            Description = "Volkswagen Group, also called Volkswagen AG, major German automobile manufacturer, founded by the German government in 1937 to mass-produce a low-priced “people's car.”",
                            EmployeeId = 7,
                            Name = "Volkswagen Group"
                        },
                        new
                        {
                            Id = 4,
                            Address = "2628  Sycamore Fork Road",
                            Country = "German",
                            Description = "Bayerische Motoren Werke AG, commonly known as Bavarian Motor Works, BMW or BMW AG, is a German automobile, motorcycle and engine manufacturing company founded in 1916",
                            EmployeeId = 2,
                            Name = "BMW Group"
                        },
                        new
                        {
                            Id = 5,
                            Address = "3599  Thomas Street",
                            Country = "France",
                            Description = "Formerly known as PSA Peugeot Citroën from 1991 to 2016), was a French multinational manufacturer of automobiles and motorcycles sold under the Peugeot, Citroën, DS,",
                            EmployeeId = 6,
                            Name = "PSA Group"
                        });
                });

            modelBuilder.Entity("Web.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sales Manager",
                            Salary = 1000.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Finance Manager",
                            Salary = 1500.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer Service Representative",
                            Salary = 2000.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Car Detailer",
                            Salary = 3000.0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lot Manager",
                            Salary = 6000.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Models.Car", b =>
                {
                    b.HasOne("Web.Models.CarBody", "CarBody")
                        .WithMany()
                        .HasForeignKey("CarBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Web.Models.Equipment", "Equipment1")
                        .WithMany()
                        .HasForeignKey("Equipment1Id");

                    b.HasOne("Web.Models.Equipment", "Equipment2")
                        .WithMany()
                        .HasForeignKey("Equipment2Id");

                    b.HasOne("Web.Models.Equipment", "Equipment3")
                        .WithMany()
                        .HasForeignKey("Equipment3Id");

                    b.HasOne("Web.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarBody");

                    b.Navigation("Employee");

                    b.Navigation("Equipment1");

                    b.Navigation("Equipment2");

                    b.Navigation("Equipment3");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Web.Models.Customer", b =>
                {
                    b.HasOne("Web.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Car");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Web.Models.Employee", b =>
                {
                    b.HasOne("Web.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Web.Models.Manufacturer", b =>
                {
                    b.HasOne("Web.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
